AJAX(Asynchronous Javascript): Javascript is normally synchronous and single threaded lanaguage. synchronous executes code one after the other and single threaded means execute only one code at a time
  console.log("hi")
  console.log("bye")

  Asynchronous Javascript allows to execute code , not immediately. Asynchronous Javascript allows to execute only specific code with interrupting other codes(UI).
  eg: adding item to cart or score update in crickbuzz etc..,

  We can use browser default timers to understand AJAX. Browser provides two default methods called
     i. setTimeOut
     ii. setInterval


i. setTimeOut : it is used to perform a task after a specific time
   setTimeOut(callback function , time in ms)
   eg: setTimeOut(()=>console.log("hello world"),1000)
    it prints hello world after 1s
    In case if any other code is next to it , it will get executed immediately.

ii . setInterval : it is used to perform a task every time of specific interval
     setInterval (callback function, time in ms)
     eg:setInterval(()=>console.log("hello world"),1000)
     it prints hello world for every 1s

we can stop these methods using clearTimeout and clearInterval
   clearTimeout(variable of setTimeOut)
   clearInterval(variable of setInterval)

To understand AJAX , we need to understand callbacks and Event Loop
Promises: callbacks creates a probelm called "callback hell" or "pyramid of doom" which is nothing but nested callbacks multiple times(one within another). callback hell code is difficult to understand or maintain. To avoid this probelm, we can use "promises"
Promise : Promise is an object which describes an eventual completion of Asynchronous operation/task . it contains three states i.e., pending, fulfilled and rejected. The default state is 'pending'
Eg : 
 "i will give you money tomorrow" is a promise
 it is an Asynchronous operation because it is not completing immediately
 this promise contains three states
     'fulfilled' -- really gives the money
     'rejected'  -- no money
      ' pending' -- keeps you waiting

  A promise can be handled using then and catch
  promise
  .then(callback)
  .catch(callback)


let x = 20000;
let p = new Promise(function (resolve, reject)
{
    if (x < 30000)
    {
        setTimeout(()=>resolve(x),2000)
    }
    else
    {
        reject("no money")
    }
})
console.log(p)
p
    .then((res) => res*2)
    .then((res2)=>res2*2)
    .then((res3)=>console.log(res3))
    .catch((err)=>console.log(err))

This series of promises connected to each other is called "promise chaining"
  
API (Application Programming Interface):
           API's are used to communicate between two softwares (client and server). client requests to the server using api and server responds to the client using api. API's are created and maintained by Server. 

           client recieves a promise whenever it requests to the api, once the promise resolved, it recieves the data through API.

To implement AJAX in our code, we have two ways
   i. using XMLHttpRequest (old way)
   ii. using fetch (new way)
   fetch (url,optional configurations)
   .then((response) => response.json())
   .then((data) => console.log(data))
   .catch((error) => console.log(error))
   fetch is a broweser inbuilt method to make API calls. fetch returns a promise which can be handled using then and catch.







   























